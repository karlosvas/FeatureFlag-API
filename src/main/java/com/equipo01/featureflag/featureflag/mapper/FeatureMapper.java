package com.equipo01.featureflag.featureflag.mapper;

import java.util.List;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

import com.equipo01.featureflag.featureflag.dto.FeatureRequestDto;
import com.equipo01.featureflag.featureflag.dto.FeatureResponseDto;
import com.equipo01.featureflag.featureflag.model.Feature;

/**
 * MapStruct mapper interface for converting between Feature entities and DTOs.
 * 
 * This interface provides bi-directional mapping functionality between Feature
 * domain
 * entities and their corresponding Data Transfer Objects (DTOs). It handles the
 * conversion logic needed to maintain separation between the data layer and the
 * presentation/API layer.
 * 
 * The mapper automatically generates implementation code at compile time using
 * MapStruct annotations, ensuring type-safe and performant conversions. It uses
 * the shared MapperConfiguration for consistent behavior across all mappers.
 * 
 * Key mapping behaviors:
 * - Entity creation ignores auto-generated fields (id, configs)
 * - Explicit mapping for enabledByDefault field preservation
 * - Support for both single entity and collection conversions
 *
 * Annotations used:
 * - @Mapper: Indicates that this interface is a MapStruct mapper
 * - @Mapping: Defines individual field mappings between source and target types
 */
@Mapper(config = MapperConfiguration.class)
public interface FeatureMapper {

    /**
     * Converts a FeatureRequestDto to a Feature entity for persistence operations.
     * 
     * This method transforms incoming request data into a domain entity suitable
     * for database operations. It specifically handles the creation scenario where
     * certain fields should be ignored or managed by the persistence layer.
     * 
     * Mapping behavior:
     * - id: Ignored (auto-generated by database)
     * - configs: Ignored (managed separately)
     * - enabledByDefault: Explicitly mapped from source DTO
     * - Other fields: Automatically mapped by name matching
     * 
     * @param dto The feature request DTO containing data from the API layer
     * @return Feature entity ready for persistence, with auto-generated fields
     *         excluded
     * @throws IllegalArgumentException if the dto parameter is null
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "configs", ignore = true)
    @Mapping(target = "enabledByDefault", source = "enabledByDefault")
    Feature toEntity(FeatureRequestDto dto);

    /**
     * Converts a Feature entity to a FeatureResponseDto for API responses.
     * 
     * This method transforms a domain entity from the persistence layer into
     * a response DTO suitable for API consumers. It includes all relevant
     * data that should be exposed to clients, including auto-generated fields
     * like ID and timestamps.
     * 
     * All entity fields are automatically mapped to corresponding DTO fields
     * using MapStruct's default mapping behavior based on field name matching.
     * 
     * @param entity The feature entity from the persistence layer
     * @return FeatureResponseDto containing all feature data for API response
     * @throws IllegalArgumentException if the entity parameter is null
     */
    FeatureResponseDto toDto(Feature entity);

    /**
     * Converts a list of Feature entities to a list of FeatureResponseDtos.
     * 
     * This method provides batch conversion functionality for collections of
     * Feature entities, applying the same mapping logic as the single entity
     * conversion method. It's particularly useful for API endpoints that return
     * multiple feature flags.
     * 
     * The conversion preserves the order of elements in the source list and
     * handles empty lists gracefully by returning an empty result list.
     * 
     * @param entities List of feature entities from the persistence layer
     * @return List of FeatureResponseDto objects for API response
     * @throws IllegalArgumentException if the entities parameter is null
     */
    List<FeatureResponseDto> toDtoList(List<Feature> entities);

}
